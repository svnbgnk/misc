#include <iostream>
#include <chrono>
#include <cmath>
#include <seqan/arg_parse.h>
#include <seqan/seq_io.h>
#include <seqan/index.h>
#include <sdsl/bit_vectors.hpp>
#include <bitset>
using namespace std;
using namespace seqan;
void printPair(pair<uint32_t, uint32_t> p){
    cout << "<" << p.first << ", " << p.second << ">";
}

void filter_interval(Pair<sdsl::bit_vector, sdsl::rank_support_v<>> & rankT){
    //TODO start criterium
    uint32_t intervalfilter_size = 3;
    float threshold = 0.5;  //equal or more than half zeroes 
    sdsl::bit_vector & b2 = rankT.i1;
    sdsl::rank_support_v<> & rb2 = rankT.i2;
    rb2.set_vector(&b2);
    
    if(rb2(rb2.size()) / static_cast<float>(b2.size() - 1) <= threshold){
        uint32_t startPos = 0, endPos = b2.size();
        for(uint32_t i = 0; i < b2.size(); ++i){
            if(b2[i] != 0)
                break; 
            ++startPos;
        }
        for(uint32_t i = 0; i < b2.size(); ++i){
            if(b2[b2.size() - 1 - i] != 0)
                break;
            --endPos;
        }
        if(startPos > endPos)
            cout << "Error bit vector has only zeroes this should have been checked by squash_interval" << endl; 
        cout << "Size: " << b2.size() << endl;
        cout << "startPos: " << startPos << " endPos: " << endPos << endl;
        
        
        
        bool last = b2[startPos];
        int pos = 1;
        uint32_t count = 0; 
        while(pos < endPos){
            if(b2[pos] != last){
                ++count;
                last = !last;
            }
            ++pos;
        }
        
        
        
        vector<pair<uint32_t, uint32_t>> consZeroes;
        uint32_t k = startPos;
        uint32_t startOneInterval = startPos;
        while(k < endPos){
            uint32_t interval = 0;
            //TODO delete second condition it should end with 1
            while(b2[k + interval] == 0 && (k + interval) < endPos){
                ++interval;
            }
            if(interval >= intervalfilter_size){
                consZeroes.push_back(make_pair(startOneInterval, k));
                startOneInterval = k + interval;
            }
            k += interval;
            interval = 0;
            ++k;
        }
        consZeroes.push_back(make_pair(startOneInterval, k));
        for(int i = 0; i < consZeroes.size(); ++i){
            printPair(consZeroes[i]);
        }
        cout << endl;
    }
//     return(ReturnCode::ONEDIRECTION)
}

int main() {
    int a = 23456; 
    std::bitset<32> x(a);
    cout << x << endl;
    for(int i = 0; i < 32; ++i)
        cout << x[32-i-1];
    cout << endl;
    
    cout << "Test shift" << endl;
    int temp = 31;
    int temp2 = 32;
    int temp3 = 33;
    int temp4 = 34;
    std::bitset<32> b(temp);
    cout << b << endl;
    cout << endl;
    cout << ((temp & 0b11) == 0) << " end ";
    cout << ((temp2 & 0b11) == 0) << " end ";
    cout << ((temp3 & 0b11) == 0) << " end ";
    cout << ((temp4 & 0b11) == 0) << " end ";
    
    cout << endl;
    
    
 /*   
    Pair<sdsl::bit_vector, sdsl::rank_support_v<>> rankT;
//     vector<sdsl::rank_support_v<>> bit_vectors;
    
    {                   //0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
    sdsl::bit_vector b = {0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0};
    sdsl::rank_support_v<> rb (&b);
//     cout << "Test1: "  << rb(5) << endl; 
    

    rankT.i1 = b;
    rankT.i2 = rb;
 
    }
     filter_interval(rankT);*/
    cout << "Finished" << endl;
    return 0;
}



/*
    auto start = std::chrono::high_resolution_clock::now();
    const int size = 15;
    double sinTable[size];
//     #pragma omp parallel //num_threads(3)
    // Code inside this region runs in parallel.
    cout << ("Hello!\n") << endl;
     #pragma omp parallel for ordered schedule(static) //dynamic for different amounts of time /ordered
    for(int n=0; n<size; ++n)
    {
        sinTable[n] = std::sin(2 * M_PI * n / size);
//         #pragma omp ordered
        {
            cout << sinTable[n] << endl;
        }
    }
    
    double sum=0;
    #pragma omp parallel for reduction(+:sum)
    for(int n=0; n<size; ++n) sum += abs(sinTable[n]);
    cout << "Sum: " << sum << endl;
    
    float a[8], b[8];
    #pragma omp simd
    for(int n=0; n<8; ++n) a[n] += b[n];
    /*int sum=0;
    #pragma omp simd reduction(+:sum)
    for(int n=0; n<1000; ++n) sum += table[n];
    */
    /*
    auto finish = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = finish - start;
    std::cout << "Elapsed time: " << elapsed.count() << " s\n";
    */